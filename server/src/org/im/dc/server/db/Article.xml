<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.im.dc.server.db.DoArticle">
	<select id="listArticles" parameterType="ArticlesFilter" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT articleId, articleType, header, state, assignedUsers, validationError
		FROM Articles WHERE 1=1
		<if test="articleType != null">
			AND articleType = #{articleType}
		</if>
		<if test="filter.state != null">
			AND state=#{filter.state}
		</if>
		<if test="filter.user != null">
			AND assignedUsers @> ARRAY[#{filter.user}]::varchar[][]
		</if>
		<if test="filter.partHeader != null">
			AND header LIKE	#{filter.likeHeader}
		</if>
		<if test="filter.exactHeader != null">
			AND header = #{filter.exactHeader}
		</if>
		<if test="filter.partText != null">
			AND textForSearch LIKE #{filter.likeText}
		</if>
	</select>
	<select id="getAllArticles" parameterType="String" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT articleId, articleType, header, xml, state, assignedUsers, lastUpdated, validationError
		FROM Articles
		<if test="articleType != null">
			WHERE articleType = #{articleType}
		</if>
	</select>
	<select id="selectAllIds" resultType="int">
		SELECT articleId
		FROM Articles
	</select>
	<select id="selectArticle" parameterType="int" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT *
		FROM Articles
		WHERE articleId = #{id}
	</select>
	<select id="selectArticles" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT *
		FROM Articles
		WHERE articleId  = ANY(#{ids,typeHandler=org.im.dc.server.handlers.IntArrayTypeHandler})
	</select>
	<select id="selectArticleForUpdate" parameterType="int" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT *
		FROM Articles
		WHERE articleId = #{id} FOR UPDATE
	</select>
	<select id="--selectLinkedTo" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT articleId, header
		FROM Articles
		WHERE linkedTo &amp;&amp; ARRAY[#{words,typeHandler=StringArrayTypeHandler}]::varchar[][]
	</select>
	<select id="--getArticlesWithWords" parameterType="java.util.List" resultType="RecArticle" resultMap="RecArticleMap">
		SELECT *
		FROM Articles
		WHERE
		<foreach collection="words" item="item" index="index" separator="OR">
			#{item} = ANY(words)
		</foreach>
	</select>
	<insert id="insertArticles" parameterType="java.util.List">
		INSERT INTO Articles
		(header,articleType,xml,assignedUsers,state,markers,watchers,linkedTo,textForSearch,lettersCount,lastUpdated,validationError)
		VALUES
		<foreach collection="records" item="item" index="index" separator=",">
			(#{item.header},
			#{item.articleType},
			#{item.xml},
			#{item.assignedUsers,typeHandler=StringArrayTypeHandler},
			#{item.state},
			#{item.markers,typeHandler=StringArrayTypeHandler},
			#{item.watchers,typeHandler=StringArrayTypeHandler},
			#{item.linkedTo,typeHandler=StringArrayTypeHandler},
			#{item.textForSearch},
			#{item.lettersCount},
			#{item.lastUpdated},
			#{item.validationError})
		</foreach>
	</insert>
	<insert id="insertArticle" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="record.articleId">
		INSERT INTO
		Articles
		(header,articleType,xml,assignedUsers,state,markers,watchers,linkedTo,textForSearch,lettersCount,lastUpdated,validationError)
		VALUES(#{record.header},#{record.articleType},#{record.xml},#{record.assignedUsers,typeHandler=StringArrayTypeHandler},#{record.state},#{record.markers,typeHandler=StringArrayTypeHandler},#{record.watchers,typeHandler=StringArrayTypeHandler},#{record.linkedTo,typeHandler=StringArrayTypeHandler},#{record.textForSearch},#{record.lettersCount},#{record.lastUpdated},#{record.validationError})
	</insert>
	<update id="updateArticle">
		UPDATE Articles
		SET xml = #{record.xml},
			header = #{record.header},
			assignedUsers = #{record.assignedUsers,typeHandler=StringArrayTypeHandler},
			state = #{record.state},
			markers = #{record.markers,typeHandler=StringArrayTypeHandler},
			watchers = #{record.watchers,typeHandler=StringArrayTypeHandler},
			linkedTo = #{record.linkedTo,typeHandler=StringArrayTypeHandler},
			textForSearch = #{record.textForSearch},
			lettersCount = #{record.lettersCount},
			lastUpdated = #{record.lastUpdated},
			validationError = #{record.validationError}
		WHERE articleId = #{record.articleId} AND lastUpdated = #{prevLastUpdated}
	</update>
	<update id="updateArticleHeaderXml??lastUpdated?">
		UPDATE Articles
		SET xml = #{record.xml},
			header = #{record.header}
		WHERE articleId = #{record.articleId}
	</update>
	<update id="updateArticleHeader">
		UPDATE Articles
		SET header = #{record.header},
			lastUpdated = #{record.lastUpdated}
		WHERE articleId = #{record.articleId} AND lastUpdated = #{prevLastUpdated}
	</update>
	<update id="updateArticleState">
		UPDATE Articles
		SET state = #{record.state},
			lastUpdated = #{record.lastUpdated}
		WHERE articleId = #{record.articleId} AND lastUpdated = #{prevLastUpdated}
	</update>
	<update id="addWatch">
		UPDATE Articles
		SET watchers = array_append(watchers, #{user})
		WHERE articleId = #{articleId} AND NOT (watchers @> ARRAY[#{user}]::varchar[][])
	</update>
	<update id="removeWatch">
		UPDATE Articles
		SET watchers = array_remove(watchers, #{user})
		WHERE articleId = #{articleId} AND (watchers @> ARRAY[#{user}]::varchar[][])
	</update>
	<update id="reassignArticles">
		UPDATE Articles
		SET assignedUsers = #{users,typeHandler=StringArrayTypeHandler}
		WHERE articleId IN (
		<foreach collection="articleIds" item="articleId" separator=",">
			#{articleId}
		</foreach>
		)
	</update>

	<resultMap id="RecArticleMap" type="RecArticle">
		<id property="articleId" column="articleId" />
		<result property="articleType" column="articleType" />
		<result property="header" column="header" />
		<result property="xml" column="xml" />
		<result property="assignedUsers" column="assignedUsers" typeHandler="StringArrayTypeHandler" />
		<result property="state" column="state" />
		<result property="markers" column="markers" typeHandler="StringArrayTypeHandler" />
		<result property="watchers" column="watchers" typeHandler="StringArrayTypeHandler" />
		<result property="linkedTo" column="linkedTo" typeHandler="StringArrayTypeHandler" />
		<result property="textForSearch" column="textForSearch" />
		<result property="lettersCount" column="lettersCount" />
		<result property="lastUpdated" column="lastUpdated" />
		<result property="validationError" column="validationError" />
	</resultMap>

</mapper>
